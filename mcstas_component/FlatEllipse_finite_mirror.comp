/*******************************************************************************
*
* Component: TODO
*
* %I
* Written by: Christoph Herb
* Version: 0.1
* Origin: TODO
* Release: TODO
* Date: TODO
*
* %D
* TODO
*
* %P
* sourceDist: [m]   Distance used for calculating the spacing of the mirrors
* LStart:     [m]   Left focal point
* LEnd:       [m]   Right focal point
* lStart:     [m]   z-Value of the mirror start
* lEnd:       [m]   z-Value of the mirror end
* r_0: [m] small half axis of the outermost mirror
* nummirror:  [1]   number of mirrors
* mirror_width: [mm] width of the individual mirrors
* doubleReflections: [1] binary value determining whether the mirror backside is reflective
*
* Input parameters:
* TODO
*
* %E
*
*******************************************************************************/

DEFINE COMPONENT FlatEllipse_finite_mirror
DEFINITION PARAMETERS(string reflect="supermirror_m3.rfl")
SETTING PARAMETERS (
    sourceDist = 0, //only relevant for the spacing of the mirrors, where should the source sit usually this has to equal LStart
    LStart=0.6, //only relevant for the calculation of the reflections, z coordinate of the first focal point of the ellipses
    LEnd = 0.6, //z coordinate of the second focal point of the ellipses
    lStart = 0., //z coordinate of the beginning of the mirrors
    lEnd = 0., //z coordinate of the end of the mirrors
    r_0 = 0.02076, //distance of the defining point at z=0 on the outermost mirror
    nummirror= 9, // number of mirrors in the assembly
    mf = 4, //mvalue of the inner side of the coating, m>10 results in perfect reflections
    mb = 0, //mvalue of the outer side of the coating, m>10 results in perfect reflections
    mirror_width=0.003, //width of the mirror (m), take care that the mirrors do not intersect
    mirror_sidelength=1,
    doubleReflections = 0 //can neutrons be reflected from the backside of a mirror
)
OUTPUT PARAMETERS(s, pTable, R0, Qc, W, alpha, transmit)


SHARE
%{
    %include "conic_finite_mirror.h"
    %include "calciterativemirrors.h"
    //%include "w1_general.h"
    //%include "read_table-lib"
%}

DECLARE
%{
    //Scene where all geometry is added to
    Scene s;
    //Variables for Reflectivity from McStas Tables
    //t_Table pTable;
    //double R0 = 0.99;
    //double Qc = 0.021;
    //double W = 0.003;
    //double alpha = 6.07;
    //double transmit = 0;
    double *pointer_lStart;// lStart has to be used in Trace later, this requires a pointer
    //Function to handle Conic-Neutron collisions with reflectivity from McStas Tables
    void traceNeutronConicWithTables(Particle* p, ConicSurf c);
    double *rfront_inner;
    
    double dt;
    int silicon; // +1: neutron in silicon, -1: neutron in air, 0: mirrorwidth is 0; neutron cannot be in silicon
%}

INITIALIZE
%{
    if (sourceDist == 0){
        sourceDist = LStart;
    }
    pointer_lStart = &lStart;
    //Load Reflectivity Data File
    /*if (reflect && strlen(reflect)) {
        if (Table_Read(&pTable, reflect, 1) <= 0)
            exit(fprintf(stderr, "Can not read file: %s\n", reflect));
    }

    //Custom function for tracing neutrons using table data for reflectivity
    void traceNeutronConicWithTables(Particle* pa, ConicSurf c) {
        double tl = getTimeOfFirstCollisionConic(*pa, c);
        if (tl < 0)
            return;
        else {
            //Move Particle to Surface Edge
            moveParticleT(tl,pa);

            if (c.m==0) {
                absorbParticle(pa);
                return;
            }

            //Handle Reflectivity
            Vec n = getNormConic(getParticlePos(*pa),c);
            double vdotn = dotVec(n,getParticleVel(*pa));

            double q = fabs(2*vdotn*V2Q);
            double B;
            if (reflect && strlen(reflect))
                B=Table_Value(pTable, q, 1);
            else {
                B = R0;
                if (q > Qc) {
                    double arg = (q-c.m*Qc)/W;
                    if(arg < 10)
                        B *= .5*(1-tanh(arg))*(1-alpha*(q-Qc));
                    else
                        B=0;
                }
            }
            if (B < 0)
                B=0;
            else if (B > 1)
                B=1;
            if (!transmit) {
                if (!B) absorbParticle(pa);
                pa->w *= B;
                reflectParticle(n,pa);
            } else {
                if (B == 0 || rand01() >= B) { /*unreflected*/ /*}
                else { reflectParticle(n,pa); }
            }
        }
    }
    */
    //Make new scene
    silicon = (mirror_width==0) ? 0 : -1; //neutron starts in air by default
    s = makeScene();
    rfront_inner = get_r_at_z0(nummirror, 0, r_0, lStart, sourceDist, LEnd, lStart, lEnd);
    
    //Set Scene to use custom trace function for conic
    //s.traceNeutronConic = traceNeutronConicWithTables;

    //Add Geometry Here
    Point p1;
    for (int i = 0; i < nummirror; i++) {
		    p1 = makePoint(rfront_inner[i], 0, lStart);
            addFlatEllipse(LStart, LEnd, p1, lStart, lEnd, -mirror_sidelength/2, mirror_sidelength/2, mf, doubleReflections, &s); //inner side of the mirror
		    printf("b[%d] = %f\n", i, rfront_inner[i]);
    }
    if (mirror_width > 0){
        for (int i = 0; i < nummirror; i++){
            p1 = makePoint(rfront_inner[i]+mirror_width, 0, lStart);
            addFlatEllipse(LStart, LEnd, p1, lStart, lEnd, -mirror_sidelength/2, mirror_sidelength/2, mb, doubleReflections, &s); //backside of the above mirror
        }
    }
    addDisk(lEnd, 0.0, 2.0, &s); //neutrons will be propagated important if the are in silicon
	//addEllipsoid(-L, L,p1, -l,+l, 40,&s);
%}

TRACE
%{
    dt = (-z + *pointer_lStart)/vz; // first propagate neutron to the entrance window
    if (dt < 0) {
        printf("negative time\n");
    }
    PROP_DT(dt); //propagate neutron to the entrance window of the NMO
    Particle pa = makeParticle(x, y, z, vx, vy, vz, t, sx, sy, sz, silicon, p); //Assume the particle is not arriving in silicon
    if (mirror_width>0){ // if the width of the mirrors is finite neutrons have to know whether they are in silicon or not
        for (int i = 0; i < nummirror; i++){//TODO check if the real frontside is hit
            dt = fabs(rfront_inner[i]); //make sure the mirror distance to check against is positive
            if (dt +mirror_width >= fabs(x)){ //backside of the mirror further out than neutron
                if (dt <= fabs(x)) { // mirror itself closer to the optical axis than the mirro, i.e., we arrive in silicon
                    //ABSORB;
                    pa = makeParticle(x,y,z,vx,vy,vz, t, sx, sy, sz, silicon, p); //create a particle knowing it is in silicon
                    //First we have to refract at the entrance
                    Vec nStart = makeVec(0, 0, 1); //surface normal is oriented in beam direction hopefully
                    Vec init_vec = getParticleVel(pa);
                

                    //printf("before vx = %f\n", pa._vx);
                    //printf("before vy = %f\n", pa._vy);
                    //printf("before vz = %f\n", pa._vz);
                    refractNeutronFlat(&pa, nStart, 0, 0.478);//m_{silicon} =  0.478 laut Peter
                    //printf("after vx = %f\n", pa._vx);
                    //printf("after vy = %f\n", pa._vy);
                    //printf("after vz = %f\n", pa._vz);
                    break;
                    }
                }
            else{   // we do not arrive in Silicon
                //printf("arrived in Air\n");
                    break;
                    }

        }
    }
    
    traceSingleNeutron(&pa, s);//trace the neutron through the mirror assembly
    Vec nEnd = makeVec(0, 0, 1);
    if (pa.silicon==1){
        refractNeutronFlat(&pa, nEnd, 0.478, 0);//TODO
    }


    //Communicate particle state to McStas
    x = pa._x;
    y = pa._y;
    z = pa._z;
    vx = pa._vx;
    vy = pa._vy;
    vz = pa._vz;
    t = pa._t;
    sx = pa._sx;
    sy = pa._sy;
    sz = pa._sz;
    p = pa.w;

    if (pa.absorb)
        ABSORB;

    SCATTER;
%}

FINALLY %{
    //Mainly Writes Inline Detector Data
    finishSimulation(&s);
%}

MCDISPLAY
%{
    //Enlarge xy-plane when mcdisplay is ran with --zoom
	magnify("xy");

	//Draw xy-axis contour for Conic Surfaces
	int i;
    for (i = 0; i < s.num_c; i++) {
        double step = (s.c[i].ze-s.c[i].zs)/100;
        double cz;
	    for (cz = s.c[i].zs+step; cz <= s.c[i].ze; cz+= step) {
            double rp = rConic(cz-step,s.c[i]);
            double rc = rConic(cz, s.c[i]);

            line(0,rp,cz-step,0,rc,cz);
            line(0,-rp,cz-step,0,-rc,cz);

            line(rp,0,cz-step,rc,0,cz);
            line(-rp,0,cz-step,-rc,0,cz);
        }
    }

    //Draw xy-axis cross hairs for Disks
    for (i = 0; i < s.num_di; i++) {
        line(s.di[i].r0, 0, s.di[i].z0, s.di[i].r1, 0, s.di[i].z0);
        line(-s.di[i].r0, 0, s.di[i].z0, -s.di[i].r1, 0, s.di[i].z0);
        line(0, s.di[i].r0, s.di[i].z0, 0, s.di[i].r1,s.di[i].z0);
        line(0, -s.di[i].r0, s.di[i].z0, 0, -s.di[i].r1,s.di[i].z0);
    }

%}

END
